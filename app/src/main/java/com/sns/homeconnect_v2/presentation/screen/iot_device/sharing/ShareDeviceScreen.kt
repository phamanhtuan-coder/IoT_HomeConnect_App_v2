package com.sns.homeconnect_v2.presentation.screen.iot_device.sharing

import IoTHomeConnectAppTheme
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AssignmentTurnedIn
import androidx.compose.material.icons.filled.Devices
import androidx.compose.material.icons.filled.Email
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import com.sns.homeconnect_v2.core.util.validation.SnackbarVariant
import com.sns.homeconnect_v2.presentation.component.dialog.WarningDialog
import com.sns.homeconnect_v2.presentation.component.navigation.Header
import com.sns.homeconnect_v2.presentation.component.navigation.MenuBottom
import com.sns.homeconnect_v2.presentation.component.widget.ActionButtonWithFeedback
import com.sns.homeconnect_v2.presentation.component.widget.ColoredCornerBox
import com.sns.homeconnect_v2.presentation.component.widget.GenericDropdown
import com.sns.homeconnect_v2.presentation.component.widget.HCButtonStyle
import com.sns.homeconnect_v2.presentation.component.widget.InvertedCornerHeader
import com.sns.homeconnect_v2.presentation.component.widget.StyledTextField
import com.sns.homeconnect_v2.presentation.viewmodel.iot_device.sharing.DeviceSharingActionState
import com.sns.homeconnect_v2.presentation.viewmodel.iot_device.sharing.DeviceSharingViewModel
import com.sns.homeconnect_v2.presentation.viewmodel.snackbar.SnackbarViewModel
import kotlinx.coroutines.launch


/**
 * Giao di·ªán m√†n h√¨nh Share Device (ShareDeviceScreen).
 *
 * M√†n h√¨nh n√†y cho ph√©p ng∆∞·ªùi d√πng chia s·∫ª m·ªôt thi·∫øt b·ªã IoT v·ªõi ng∆∞·ªùi d√πng kh√°c b·∫±ng c√°ch nh·∫≠p ID thi·∫øt b·ªã,
 * email c·ªßa ng∆∞·ªùi nh·∫≠n v√† ch·ªçn quy·ªÅn truy c·∫≠p.
 *
 * -----------------------------------------
 * **Ng∆∞·ªùi vi·∫øt:** Nguy·ªÖn Thanh Sang
 * **Ng√†y vi·∫øt:** 21/05/2025
 * **L·∫ßn c·∫≠p nh·∫≠t cu·ªëi:** 21/05/2025
 * -----------------------------------------
 * **Input:**
 * - `id`: [Int] - ID c·ªßa thi·∫øt b·ªã c·∫ßn chia s·∫ª. Th√¥ng tin n√†y ƒë∆∞·ª£c truy·ªÅn v√†o khi ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh.
 *
 * **Output:**
 * - Hi·ªÉn th·ªã giao di·ªán ng∆∞·ªùi d√πng cho ph√©p nh·∫≠p th√¥ng tin chia s·∫ª v√† th·ª±c hi·ªán h√†nh ƒë·ªông chia s·∫ª.
 * - S·ª≠ d·ª•ng `ActionButtonWithFeedback` ƒë·ªÉ x·ª≠ l√Ω h√†nh ƒë·ªông chia s·∫ª, bao g·ªìm hi·ªÉn th·ªã dialog x√°c nh·∫≠n
 *   v√† th√¥ng b√°o k·∫øt qu·∫£ (th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i).
 *
 * **Lu·ªìng ho·∫°t ƒë·ªông:**
 * 1. Ng∆∞·ªùi d√πng nh·∫≠p email c·ªßa ng∆∞·ªùi mu·ªën chia s·∫ª v√†o tr∆∞·ªùng `StyledTextField`.
 * 2. Ng∆∞·ªùi d√πng ch·ªçn quy·ªÅn truy c·∫≠p cho ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª t·ª´ `GenericDropdown`.
 * 3. Ng∆∞·ªùi d√πng nh·∫•n n√∫t "G·ª≠i y√™u c·∫ßu" (`ActionButtonWithFeedback`).
 * 4. M·ªôt `WarningDialog` ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë·ªÉ x√°c nh·∫≠n h√†nh ƒë·ªông chia s·∫ª.
 * 5. N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n:
 *    - H√†m `onAction` c·ªßa `ActionButtonWithFeedback` ƒë∆∞·ª£c g·ªçi.
 *    - Callback `onSuccess` v√† `onError` ƒë∆∞·ª£c l∆∞u tr·ªØ t·∫°m th·ªùi.
 *    - Tr·∫°ng th√°i `isButtonLoading` ƒë∆∞·ª£c ƒë·∫∑t th√†nh `true` ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i.
 *    - M·ªôt coroutine ƒë∆∞·ª£c kh·ªüi ch·∫°y ƒë·ªÉ m√¥ ph·ªèng y√™u c·∫ßu API (trong v√≠ d·ª• n√†y l√† `delay(1000)`).
 *    - D·ª±a tr√™n k·∫øt qu·∫£ m√¥ ph·ªèng, callback `onSuccessCallback` ho·∫∑c `onErrorCallback` t∆∞∆°ng ·ª©ng ƒë∆∞·ª£c g·ªçi
 *      ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£.
 * 6. N·∫øu ng∆∞·ªùi d√πng h·ªßy b·ªè, dialog s·∫Ω ƒë√≥ng v√† kh√¥ng c√≥ h√†nh ƒë·ªông n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.
 *
 * **Th√†nh ph·∫ßn ch√≠nh:**
 */
@Composable
fun ShareDeviceScreen(
    navController: NavHostController,
    serialNumber: String,
    snackbarViewModel : SnackbarViewModel = hiltViewModel(),
    viewModel: DeviceSharingViewModel = hiltViewModel(),
) {
    val ticketState by viewModel.createTicketState.collectAsState()

    when (ticketState) {
        is DeviceSharingActionState.Success -> {
            val msg = (ticketState as DeviceSharingActionState.Success).success
            navController.popBackStack()
            snackbarViewModel.showSnackbar(msg, SnackbarVariant.SUCCESS)
        }
        is DeviceSharingActionState.Error -> {
            val msg = (ticketState as DeviceSharingActionState.Error).error
            snackbarViewModel.showSnackbar(msg, SnackbarVariant.ERROR)
        }
        else -> Unit
    }

//    val addSharedUserState by viewModel.addSharedUserState.collectAsState()
//    when (addSharedUserState) {
//        DeviceSharingActionState.Idle -> {
//            viewModel.getSharedUsers(id)
//        }
//
//        DeviceSharingActionState.Loading -> {
//            CircularProgressIndicator()
//        }
//
//        is DeviceSharingActionState.Success -> {
//            LaunchedEffect(Unit) {
//                navController.popBackStack(
//                    Screens.SharedUsers.route + "?id=${id}",
//                    inclusive = false
//                )
//            }
//        }
//
//        is DeviceSharingActionState.Error -> {
//            Log.e(
//                "ShareDeviceScreen",
//                "Error: ${(addSharedUserState as DeviceSharingState.Error).error}"
//            )
//        }
//    }
//    val deviceIdErrorState = remember { mutableStateOf("") }
//    val emailErrorState = remember { mutableStateOf("") }
//        val isTablet = isTablet(LocalContext.current)

    // state gi·ªØ h√†m onSuccess / onError t·∫°m th·ªùi
    val coroutineScope = rememberCoroutineScope()

    // state gi·ªØ gi√° tr·ªã hi·ªán t·∫°i c·ªßa dropdown
    var current by remember { mutableStateOf<String?>(null) }
    val deviceIdState = remember { mutableStateOf(serialNumber) }

    // state gi·ªØ gi√° tr·ªã nh·∫≠p v√†o
    val usernameState = remember { mutableStateOf("") }

    /* state hi·ªÉn th·ªã dialog x√°c nh·∫≠n */
    var showConfirm by remember { mutableStateOf(false) }

    /* state gi·ªØ h√†m onSuccess / onError t·∫°m th·ªùi */
    var isButtonLoading by remember { mutableStateOf(false) }
//    var pendingOnSuccess by remember { mutableStateOf<((String) -> Unit)?>(null) }
//    var pendingOnError   by remember { mutableStateOf<((String) -> Unit)?>(null) }

    IoTHomeConnectAppTheme {
        val colorScheme = MaterialTheme.colorScheme

        Scaffold(
            modifier = Modifier
                .fillMaxSize()
                .background(colorScheme.background),
            topBar = {
                /*
            * Hi·ªÉn th·ªã Header
             */
                Header(
                    navController = navController,
                    type = "Back",
                    title = "Chi ti·∫øt thi·∫øt b·ªã"
                )
            },
            bottomBar = {
                /*
            * Hi·ªÉn th·ªã Thanh Menu d∆∞·ªõi c√πng
             */
                MenuBottom(navController)
            },
            containerColor = colorScheme.background
        ) { paddingValues ->
            Column (
                modifier = Modifier
                    .padding(paddingValues )
                    .fillMaxSize()
            ) {
                ColoredCornerBox(
                    cornerRadius = 40.dp
                ) {
                }

                InvertedCornerHeader(
                    backgroundColor = colorScheme.surface,
                    overlayColor = colorScheme.primary
                ) {
                }

                Box(
                    modifier = Modifier
                        .fillMaxSize()
                ) {
                    Column(
                        modifier = Modifier
                            .align(Alignment.Center)
                            .padding(16.dp)
                            .verticalScroll(rememberScrollState()),
                        verticalArrangement  = Arrangement.Center,
                        horizontalAlignment  = Alignment.CenterHorizontally
                    ) {
                        // √î nh·∫≠p T√™n thi·∫øt b·ªã
                        StyledTextField(
                            value = usernameState.value,
                            onValueChange = {
                                usernameState.value = it
                            },
                            placeholderText = "Usercase",
                            leadingIcon = Icons.Default.Email
                        )

                        Spacer(modifier = Modifier.height(8.dp))

                        GenericDropdown(
                            items = listOf("VIEW", "CONTROL"),
                            selectedItem = current,
                            onItemSelected = { current = it },
                            isTablet = false,
                            leadingIcon = Icons.Default.AssignmentTurnedIn // üëà truy·ªÅn icon v√†o
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        ActionButtonWithFeedback(
                            label  = "G·ª≠i y√™u c·∫ßu",
                            style  = HCButtonStyle.PRIMARY,
                            onAction = { onSuccessCallback, onErrorCallback ->
                                /* 1. L∆∞u callback ‚Üí ch·ªù x√°c nh·∫≠n */
//                                pendingOnSuccess = onSuccessCallback
//                                pendingOnError   = onErrorCallback
                                showConfirm      = true
                            },
                            isLoadingFromParent = isButtonLoading,
                            snackbarViewModel = snackbarViewModel
                        )

                        /* 2. ConfirmationDialog ‚Äî h·ªèi ng∆∞·ªùi d√πng */
                        if (showConfirm) {
                            WarningDialog(
                                title    = "Chia s·∫Ω thi·∫øt b·ªã",
                                text  = "B·∫°n c√≥ ch·∫Øc mu·ªën chia s·∫Ω thi·∫øt b·ªã n√†y v·ªõi ng∆∞·ªùi d√πng n√†y kh√¥ng?",
                                confirmText = " ƒê·ªìng √Ω",
                                dismissText = "Hu·ª∑",
                                onConfirm = {
                                    showConfirm = false        // ƒë√≥ng dialog
                                    /* 3. Sau khi ƒë·ªìng √Ω ‚Üí th·ª±c thi h√†nh ƒë·ªông th·∫≠t */
//                                    val onSuccessCallback = pendingOnSuccess    // copy local
//                                    val onErrorCallback = pendingOnError
//                                    pendingOnSuccess = null
//                                    pendingOnError   = null
                                    coroutineScope.launch {
                                        isButtonLoading = true

                                        viewModel.createSupportTicket(
                                            title = "Chia s·∫ª quy·ªÅn thi·∫øt b·ªã",
                                            description = current ?: "VIEW",
                                            ticketTypeId = 3,
                                            deviceSerial = deviceIdState.value,
                                            assignedTo = usernameState.value
                                        )
                                    }
                                },
                                onDismiss = {
                                    showConfirm = false          // hu·ª∑, kh√¥ng l√†m g√¨
//                                    pendingOnSuccess = null
//                                    pendingOnError   = null
                                    isButtonLoading = false
                                },
                            )
                        }
                    }
                }
            }
        }
    }
}