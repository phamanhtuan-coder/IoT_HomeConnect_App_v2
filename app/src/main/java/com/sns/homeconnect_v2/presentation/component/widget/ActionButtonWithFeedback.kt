package com.sns.homeconnect_v2.presentation.component.widget

import IoTHomeConnectAppTheme
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.TextUnit
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.sns.homeconnect_v2.presentation.component.dialog.ConfirmationDialog
import com.sns.homeconnect_v2.presentation.component.dialog.WarningDialog
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch



/**
 * X√°c ƒë·ªãnh ki·ªÉu d√°ng c·ªßa n√∫t h√†nh ƒë·ªông.
 * - [PRIMARY]: Ki·ªÉu ch√≠nh, th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng cho h√†nh ƒë·ªông quan tr·ªçng nh·∫•t.
 * - [SECONDARY]: Ki·ªÉu ph·ª•, th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c h√†nh ƒë·ªông √≠t quan tr·ªçng h∆°n ho·∫∑c h√†nh ƒë·ªông thay th·∫ø.
 * - [DISABLED]: Ki·ªÉu kh√¥ng kh·∫£ d·ª•ng, n√∫t s·∫Ω b·ªã v√¥ hi·ªáu h√≥a v√† kh√¥ng th·ªÉ t∆∞∆°ng t√°c.
 */
enum class HCButtonStyle { PRIMARY, SECONDARY, DISABLED }

/**
 * M·ªôt n√∫t h√†nh ƒë·ªông 3‚Äëtr·∫°ng‚Äëth√°i (Primary, Secondary, Disabled) k√®m loading + dialog ph·∫£n h·ªìi.
 *
 * @author Nguy·ªÖn Thanh Sang
 * @since 20-05-2025
 * @param label Nh√£n hi·ªÉn th·ªã tr√™n n√∫t.
 * @param onAction H√†m lambda ƒë∆∞·ª£c g·ªçi khi n√∫t ƒë∆∞·ª£c nh·∫•n. H√†m n√†y nh·∫≠n hai callback:
 *                 `onSuccess` (ƒë·ªÉ truy·ªÅn th√¥ng ƒëi·ªáp th√†nh c√¥ng) v√† `onError` (ƒë·ªÉ truy·ªÅn th√¥ng ƒëi·ªáp l·ªói).
 *                 H√†m n√†y ƒë∆∞·ª£c th·ª±c thi trong m·ªôt coroutine scope.
 * @param style Ki·ªÉu c·ªßa n√∫t, m·∫∑c ƒë·ªãnh l√† [HCButtonStyle.PRIMARY].
 * @param onSuccess Callback ƒë∆∞·ª£c g·ªçi khi h√†nh ƒë·ªông th√†nh c√¥ng v√† ng∆∞·ªùi d√πng nh·∫•n "OK" tr√™n dialog th√†nh c√¥ng.
 * @param modifier Modifier ƒë·ªÉ t√πy ch·ªânh giao di·ªán v√† h√†nh vi c·ªßa n√∫t.
 * @param height Chi·ªÅu cao c·ªßa n√∫t, m·∫∑c ƒë·ªãnh l√† `56.dp`.
 * @param width Chi·ªÅu r·ªông c·ªßa n√∫t, m·∫∑c ƒë·ªãnh l√† [Dp.Unspecified] (s·∫Ω fill chi·ªÅu r·ªông c·ªßa container).
 * @param textSize K√≠ch th∆∞·ªõc ch·ªØ c·ªßa nh√£n n√∫t, m·∫∑c ƒë·ªãnh l√† `26.sp`.
 * @param shape H√¨nh d·∫°ng c·ªßa n√∫t, m·∫∑c ƒë·ªãnh l√† bo g√≥c `12.dp`.
 * @param successDialogTitle Ti√™u ƒë·ªÅ c·ªßa dialog hi·ªÉn th·ªã khi h√†nh ƒë·ªông th√†nh c√¥ng.
 * @param errorDialogTitle Ti√™u ƒë·ªÅ c·ªßa dialog hi·ªÉn th·ªã khi h√†nh ƒë·ªông th·∫•t b·∫°i.
 * @param isLoadingFromParent C·ªù ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i loading c·ªßa n√∫t t·ª´ b√™n ngo√†i (component cha).
 *                            Khi `true`, n√∫t s·∫Ω hi·ªÉn th·ªã tr·∫°ng th√°i loading.
 *                            Tr·∫°ng th√°i loading n·ªôi b·ªô c·ªßa n√∫t s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo gi√° tr·ªã n√†y.
 */
@Composable
fun ActionButtonWithFeedback(
    label: String,
    onAction: suspend (onSuccess: (String) -> Unit, onError: (String) -> Unit) -> Unit,
    style: HCButtonStyle = HCButtonStyle.PRIMARY,
    onSuccess: () -> Unit = {},
    modifier: Modifier = Modifier,
    height: Dp = 48.dp,
    width: Dp = 200.dp,
    textSize: TextUnit = 18.sp,
    shape: RoundedCornerShape = RoundedCornerShape(50),
    successDialogTitle: String = "üéâ Th√†nh c√¥ng",
    errorDialogTitle: String = "‚ùå L·ªói",
    isLoadingFromParent: Boolean = false
) {
    IoTHomeConnectAppTheme {
        var isLoading by remember { mutableStateOf(false) }
        var successMsg by remember { mutableStateOf<String?>(null) }
        var errorMsg   by remember { mutableStateOf<String?>(null) }
        val scope = rememberCoroutineScope()

        // n·∫øu cha √©p loading
        LaunchedEffect(isLoadingFromParent) { isLoading = isLoadingFromParent }

        /* ---------- m√†u s·∫Øc ---------- */
        val cs = MaterialTheme.colorScheme
        val (bg, fg, border) = when (style) {
            HCButtonStyle.PRIMARY   -> Triple(cs.primary, cs.onPrimary, null)
            HCButtonStyle.SECONDARY -> Triple(cs.onPrimary, cs.primary, BorderStroke(2.dp, cs.primary))
            HCButtonStyle.DISABLED  -> Triple(Color(0xFFE0E0E0), Color(0xFF9E9E9E), null)
        }
        val enabled = style != HCButtonStyle.DISABLED && !isLoading

        Box(
            modifier = modifier.then(
                Modifier
                    .fillMaxWidth()
                    .then(if (width != Dp.Unspecified) Modifier.width(width) else Modifier)
            ),
            contentAlignment = Alignment.Center
        ) {
            /* ---------- N√∫t ch√≠nh ---------- */
            Button(
                onClick = {
                    scope.launch {
                        isLoading = true

                        delay(500)

                        onAction(
                            { msg -> isLoading = false; successMsg = msg },
                            { msg -> isLoading = false; errorMsg   = msg }
                        )
                    }
                },
                enabled = enabled,
                shape = shape,
                border = border,
                colors = ButtonDefaults.buttonColors(
                    containerColor = bg,
                    contentColor   = fg,
                    disabledContainerColor = bg,
                    disabledContentColor   = fg
                ),
                modifier = Modifier
                    .height(height)
                    .fillMaxWidth()
            ) {
                if (isLoading) {
                    CircularProgressIndicator(
                        color = fg,
                        strokeWidth = 2.dp,
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(Modifier.width(8.dp))
                    Text("ƒêang x·ª≠ l√Ω‚Ä¶", fontSize = textSize, fontWeight = FontWeight.Medium)
                } else {
                    Text(label, fontSize = textSize, fontWeight = FontWeight.Medium)
                }
            }

            /* ---------- Dialog th√†nh c√¥ng ---------- */
            successMsg?.let { msg ->
                ConfirmationDialog(
                    title       = successDialogTitle,
                    message     = msg,
                    onConfirm   = { successMsg = null; onSuccess() },
                    onDismiss   = { successMsg = null },
                    confirmText = "OK",
                    dismissText = ""
                )
            }

            /* ---------- Dialog l·ªói ---------- */
            errorMsg?.let { msg ->
                ConfirmationDialog(
                    title       = errorDialogTitle,
                    message     = msg,
                    onConfirm   = { errorMsg = null },
                    onDismiss   = { errorMsg = null },
                    confirmText = "OK",
                    dismissText = ""
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
private fun ActionButtonStylesPreview() {
    val coroutineScope = rememberCoroutineScope()
    /* state hi·ªÉn th·ªã dialog x√°c nh·∫≠n */
    var showConfirm by remember { mutableStateOf(false) }

    /* state gi·ªØ h√†m onSuccess / onError t·∫°m th·ªùi */
    var isButtonLoading by remember { mutableStateOf(false) }
    var pendingOnSuccess by remember { mutableStateOf<((String) -> Unit)?>(null) }
    var pendingOnError   by remember { mutableStateOf<((String) -> Unit)?>(null) }

    Column(
        modifier = Modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        ActionButtonWithFeedback(
            label  = "Ho√†n t·∫•t",
            style  = HCButtonStyle.PRIMARY,
            // 1) H√†nh ƒë·ªông th·∫≠t c·ªßa b·∫°n
            onAction = { onSuccessCallback, onErrorCallback ->
                /* 1. L∆∞u callback ‚Üí ch·ªù x√°c nh·∫≠n */
                pendingOnSuccess = onSuccessCallback
                pendingOnError   = onErrorCallback
                showConfirm      = true
            },
            // 2) T√πy ch·ªânh ti√™u ƒë·ªÅ dialog
            successDialogTitle = "‚úÖ Th√†nh c√¥ng",
            errorDialogTitle   = "‚ö†Ô∏è L·ªói",
            isLoadingFromParent = isButtonLoading
        )

        /* 2. ConfirmationDialog ‚Äî h·ªèi ng∆∞·ªùi d√πng */
        if (showConfirm) {
            WarningDialog(
                title    = "X√°c nh·∫≠n h√†nh ƒë·ªông",
                text  = "B·∫°n c√≥ ch·∫Øc mu·ªën th·ª±c hi·ªán thao t√°c n√†y?",
                confirmText = "ƒê·ªìng √Ω",
                dismissText = "Hu·ª∑",
                onConfirm = {
                    showConfirm = false        // ƒë√≥ng dialog
                    /* 3. Sau khi ƒë·ªìng √Ω ‚Üí th·ª±c thi h√†nh ƒë·ªông th·∫≠t */
                    val onSuccessCallback = pendingOnSuccess    // copy local
                    val onErrorCallback = pendingOnError
                    pendingOnSuccess = null
                    pendingOnError   = null
                    coroutineScope.launch {
                        delay(1000)               // m√¥ ph·ªèng API
                        val isActionSuccessful = true           // ‚Üê k·∫øt qu·∫£ th·∫≠t
                        if (isActionSuccessful) onSuccessCallback?.invoke("Thi·∫øt b·ªã ƒë√£ th√™m th√†nh c√¥ng!")
                        else      onErrorCallback?.invoke("Thao t√°c th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.")
                    }
                },
                onDismiss = {
                    showConfirm = false          // hu·ª∑, kh√¥ng l√†m g√¨
                    pendingOnSuccess = null
                    pendingOnError   = null
                    isButtonLoading = false
                },
            )
        }

        ActionButtonWithFeedback(
            label  = "Ho√†n t·∫•t",
            style  = HCButtonStyle.PRIMARY,

            // 1) H√†nh ƒë·ªông th·∫≠t c·ªßa b·∫°n
            onAction = { onSuccess, onError ->

                coroutineScope.launch {
                    // m√¥ ph·ªèng call API ‚Üí delay 1 gi√¢y
                    delay(1000)

                    val isActionSuccessful = true // ‚Üê k·∫øt qu·∫£ th·∫≠t ·ªü ƒë√¢y
                    if (isActionSuccessful)   onSuccess("Thi·∫øt b·ªã ƒë√£ th√™m th√†nh c√¥ng!")
                    else        onError("Thao t√°c th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.")
                }
            },
        )
        ActionButtonWithFeedback(
            label = "Yes",
            style = HCButtonStyle.SECONDARY,
            onAction = { _, _ -> }
        )

        ActionButtonWithFeedback(
            label = "Yes",
            style = HCButtonStyle.DISABLED,
            onAction = { _, _ -> }
        )
    }
}
