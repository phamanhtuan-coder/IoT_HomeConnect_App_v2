package com.sns.homeconnect_v2.presentation.screen.iot_device

import CustomLineChart
import IoTHomeConnectAppTheme
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Today
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.sns.homeconnect_v2.presentation.component.ChartLegend
import com.sns.homeconnect_v2.presentation.component.DeviceStatusCard
import com.sns.homeconnect_v2.presentation.component.navigation.Header
import com.sns.homeconnect_v2.presentation.component.navigation.MenuBottom
import com.sns.homeconnect_v2.presentation.component.widget.ColoredCornerBox
import com.sns.homeconnect_v2.presentation.component.widget.CustomTabRow
import com.sns.homeconnect_v2.presentation.component.widget.GenericDropdown
import com.sns.homeconnect_v2.presentation.component.widget.InvertedCornerHeader
import com.sns.homeconnect_v2.presentation.model.DataPoint
import com.sns.homeconnect_v2.presentation.model.DeviceStatusCardData

/**
 * H√†m Composable cho M√†n h√¨nh B·∫£ng ƒëi·ªÅu khi·ªÉn.
 * M√†n h√¨nh n√†y hi·ªÉn th·ªã d·ªØ li·ªáu c·∫£m bi·∫øn (nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, kh√≠ gas, ƒëi·ªán nƒÉng)
 * d∆∞·ªõi d·∫°ng bi·ªÉu ƒë·ªì ƒë∆∞·ªùng v√† danh s√°ch c√°c thi·∫øt b·ªã cho c√°c ph√≤ng kh√°c nhau.
 *
 * @param navController NavHostController ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.
 * @author Nguy·ªÖn Thanh Sang
 * @since 25-05-2025
 */
@Composable
fun DashboardScreen(navController: NavHostController) {
    IoTHomeConnectAppTheme {
        val colorScheme = MaterialTheme.colorScheme
        var selectedSensorTypeTabIndex by remember { mutableIntStateOf(0) }
        val sensorTypeTabTitles = listOf("Nhi·ªát ƒë·ªô", "ƒê·ªô ·∫©m", "Kh√≠ gas", "ƒêi·ªán ti√™u th·ª•")
        var selectedRoomTabIndex by remember { mutableIntStateOf(0) }
        val roomTabTitles = listOf("Ph√≤ng kh√°ch", "Ph√≤ng ng·ªß", "Ph√≤ng b·∫øp", "Ph√≤ng ch·ªù")
        val temperatureData = (0..23).map { hour ->
            val temperatureValue = (14 + 10 * kotlin.math.sin(Math.PI * (hour - 6) / 15)).toFloat() + (0..2).random()
            DataPoint("%02d:00".format(hour), temperatureValue)
        }
        val humidityData = (0..23).map { hour ->
            val humidityValue = (85 - (hour * 1.2) + (0..3).random()).toFloat()
            DataPoint("%02d:00".format(hour), humidityValue)
        }
        val gasData = (0..23).map { hour ->
            val gasValue = 0.2f + (0..3).random() * 0.01f
            DataPoint("%02d:00".format(hour), gasValue)
        }
        val electricityData = (0..23).map { hour ->
            val electricityUsage = when (hour) {
                in 0..5 -> 0.2f + (0..3).random() * 0.01f
                in 6..16 -> 0.15f + (0..2).random() * 0.01f
                else -> 0.3f + (0..4).random() * 0.01f
            }
            DataPoint("%02d:00".format(hour), electricityUsage)
        }
        // V√≠ d·ª•: 4 lo·∫°i, m√†u gi·ªëng m·∫´u ·∫£nh
        val chartColors = listOf(
            Color(0xFF26A69A), // Xanh ng·ªçc - Nhi·ªát ƒë·ªô
            Color(0xFF5C6BC0), // Xanh t√≠m - ƒê·ªô ·∫©m
            Color(0xFFE57373), // ƒê·ªè - Kh√≠ gas
            Color(0xFFFFB300)  // V√†ng - ƒêi·ªán ti√™u th·ª•
        )
        val chartFillColors = listOf(
            Color(0x5526A69A), // Xanh ng·ªçc nh·∫°t
            Color(0x555C6BC0), // Xanh t√≠m nh·∫°t
            Color(0x55E57373), // ƒê·ªè nh·∫°t
            Color(0x55FFB300)  // V√†ng nh·∫°t
        )
        val chartNames = listOf(
            "Nhi·ªát ƒë·ªô",
            "ƒê·ªô ·∫©m",
            "Kh√≠ gas",
            "ƒêi·ªán ti√™u th·ª•"
        )
        val chartDataList = listOf(
            temperatureData, // 0
            humidityData,    // 1
            gasData,         // 2
            electricityData  // 3
        )
        val selectedSensorLineColor = chartColors[selectedSensorTypeTabIndex]
        val selectedSensorFillColor = chartFillColors[selectedSensorTypeTabIndex]
        val selectedSensorChartLabel = chartNames[selectedSensorTypeTabIndex]
        val selectedSensorData = chartDataList.getOrNull(selectedSensorTypeTabIndex) ?: temperatureData
        val livingRoomDevices = listOf(
            DeviceStatusCardData("M√ÅY B√ÅO KH√ìI", "B√°o ch√°y", true, "0.0 W", "0.0 ƒë·ªô"),
            DeviceStatusCardData("CAMERA 1", "Camera", true, "2.0 W", "30.0 ƒë·ªô"),
            DeviceStatusCardData("ƒê√àN TR·∫¶N", "Chi·∫øu s√°ng", false, "10.0 W", "32.0 ƒë·ªô"),
        )
        val bedroomDevices = listOf(
            DeviceStatusCardData("M√ÅY L·∫†NH", "ƒêi·ªÅu ho√†", true, "800.0 W", "20.0 ƒë·ªô"),
            DeviceStatusCardData("ƒê√àN ƒê·∫¶U GI∆Ø·ªúNG", "Chi·∫øu s√°ng", false, "5.0 W", "30.0 ƒë·ªô"),
        )
        val kitchenDevices = listOf(
            DeviceStatusCardData("B·∫æP T·ª™", "B·∫øp", false, "1500.0 W", "50.0 ƒë·ªô"),
            DeviceStatusCardData("M√ÅY H√öT KH√ìI", "H√∫t m√πi", true, "120.0 W", "38.0 ƒë·ªô"),
        )
        val lobbyDevices = listOf(
            DeviceStatusCardData("M√ÅY L·ªåC KH√îNG KH√ç", "L·ªçc kh√≠", true, "60.0 W", "28.0 ƒë·ªô"),
        )
        val deviceCardLists = listOf(
            livingRoomDevices, // 0
            bedroomDevices,    // 1
            kitchenDevices,    // 2
            lobbyDevices       // 3
        )
        val currentDeviceList = deviceCardLists.getOrNull(selectedRoomTabIndex) ?: emptyList()

        var selectedDay by remember { mutableStateOf<String?>(null) }

        Scaffold(
            topBar = {
                Header(
                    navController = navController,
                    type          = "Back",
                    title         = "Space Details"
                )
            },
            containerColor = Color.White,
            bottomBar = {
                MenuBottom(navController)
            }
        ) { scaffoldPadding ->
            LazyColumn (
                modifier= Modifier
                    .padding(scaffoldPadding)
            ) {
                item {
                    ColoredCornerBox(
                        cornerRadius = 40.dp
                    ) {
                        Box(
                            modifier = Modifier
                                .padding(horizontal = 16.dp, vertical = 16.dp)
                                .fillMaxWidth(),
                            contentAlignment = Alignment.Center,
                        ) {
                            Text(
                                text          = "Nhi·ªát ƒë·ªô",
                                color         = Color.White,
                                fontSize      = 30.sp,
                                fontWeight    = FontWeight.Bold,
                                letterSpacing = 0.5.sp
                            )
                        }
                    }

                    InvertedCornerHeader(
                        backgroundColor = colorScheme.surface,
                        overlayColor = colorScheme.primary
                    ) {
                        CustomTabRow(
                            tabs = sensorTypeTabTitles,
                            selectedTabIndex = selectedSensorTypeTabIndex,
                            onTabSelected = { selectedSensorTypeTabIndex = it }
                        )
                    }

                    Column (
                        modifier = Modifier
                            .padding(horizontal = 16.dp, vertical = 16.dp),
                        verticalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        CustomLineChart(
                            dataPoints = selectedSensorData,
                            chartWidth = 350.dp,
                            chartHeight = 240.dp,
                            yLabelCount = 5,
                            lineColor = selectedSensorLineColor,
                            fillColor = selectedSensorFillColor,
                            backgroundColor = Color(0xFFF7F2FA),
                            showFill = true,
                            cornerRadius = 8.dp,
                            labelTextSize = 12f
                        )
                        ChartLegend(
                            color = selectedSensorLineColor,
                            label = selectedSensorChartLabel
                        )
                        GenericDropdown(
                            items = listOf("Ph√≤ng kh√°ch", "Ph√≤ng ng·ªß", "Nh√† b·∫øp"),
                            selectedItem = selectedDay,
                            onItemSelected = { selectedDay = it },
                            isTablet = false,
                            placeHolder = "Ng√†y",
                            leadingIcon = Icons.Default.Today // üëà truy·ªÅn icon v√†o
                        )
                    }

                    Box {
                        CustomTabRow(
                            tabs = roomTabTitles,
                            selectedTabIndex = selectedRoomTabIndex,
                            onTabSelected = { selectedRoomTabIndex = it },
                            modifier = Modifier
                                .fillMaxWidth(),

                        )
                        // Divider n·∫±m d∆∞·ªõi c√πng, ph·ªß full chi·ªÅu ngang
                        Divider(
                            color = Color(0xFFE0E0E0), // X√°m nh·∫°t
                            thickness = 1.dp,
                            modifier = Modifier
                                .align(Alignment.BottomStart)
                                .fillMaxWidth()
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Column(
                        modifier = Modifier
                            .padding(horizontal = 16.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        currentDeviceList.forEach { device ->
                            DeviceStatusCard(
                                title = device.title,
                                type = device.type,
                                isOn = device.status,
                                powerConsumption = device.power,
                                temperature = device.temp,
                                onDetailsButtonClick = { /* M·ªü chi ti·∫øt thi·∫øt b·ªã */ }
                            )
                        }
                    }
                    Spacer(modifier = Modifier.height(16.dp))
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewDashboardScreen() {
    DashboardScreen(navController = rememberNavController())
}