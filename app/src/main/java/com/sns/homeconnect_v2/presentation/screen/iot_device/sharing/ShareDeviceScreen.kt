package com.sns.homeconnect_v2.presentation.screen.iot_device.sharing

import IoTHomeConnectAppTheme
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AssignmentTurnedIn
import androidx.compose.material.icons.filled.Devices
import androidx.compose.material.icons.filled.Email
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.setValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import com.sns.homeconnect_v2.presentation.component.dialog.WarningDialog
import com.sns.homeconnect_v2.presentation.component.widget.ActionButtonWithFeedback
import com.sns.homeconnect_v2.presentation.component.widget.ColoredCornerBox
import com.sns.homeconnect_v2.presentation.component.widget.GenericDropdown
import com.sns.homeconnect_v2.presentation.component.widget.HCButtonStyle
import com.sns.homeconnect_v2.presentation.component.widget.InvertedCornerHeader
import com.sns.homeconnect_v2.presentation.component.widget.StyledTextField
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch


/**
 * Giao di·ªán m√†n h√¨nh Share Device (ShareDeviceScreen).
 *
 * M√†n h√¨nh n√†y cho ph√©p ng∆∞·ªùi d√πng chia s·∫ª m·ªôt thi·∫øt b·ªã IoT v·ªõi ng∆∞·ªùi d√πng kh√°c b·∫±ng c√°ch nh·∫≠p ID thi·∫øt b·ªã,
 * email c·ªßa ng∆∞·ªùi nh·∫≠n v√† ch·ªçn quy·ªÅn truy c·∫≠p.
 *
 * -----------------------------------------
 * **Ng∆∞·ªùi vi·∫øt:** Nguy·ªÖn Thanh Sang
 * **Ng√†y vi·∫øt:** 21/05/2025
 * **L·∫ßn c·∫≠p nh·∫≠t cu·ªëi:** 21/05/2025
 * -----------------------------------------
 * **Input:**
 * - `id`: [Int] - ID c·ªßa thi·∫øt b·ªã c·∫ßn chia s·∫ª. Th√¥ng tin n√†y ƒë∆∞·ª£c truy·ªÅn v√†o khi ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh.
 *
 * **Output:**
 * - Hi·ªÉn th·ªã giao di·ªán ng∆∞·ªùi d√πng cho ph√©p nh·∫≠p th√¥ng tin chia s·∫ª v√† th·ª±c hi·ªán h√†nh ƒë·ªông chia s·∫ª.
 * - S·ª≠ d·ª•ng `ActionButtonWithFeedback` ƒë·ªÉ x·ª≠ l√Ω h√†nh ƒë·ªông chia s·∫ª, bao g·ªìm hi·ªÉn th·ªã dialog x√°c nh·∫≠n
 *   v√† th√¥ng b√°o k·∫øt qu·∫£ (th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i).
 *
 * **Lu·ªìng ho·∫°t ƒë·ªông:**
 * 1. Ng∆∞·ªùi d√πng nh·∫≠p email c·ªßa ng∆∞·ªùi mu·ªën chia s·∫ª v√†o tr∆∞·ªùng `StyledTextField`.
 * 2. Ng∆∞·ªùi d√πng ch·ªçn quy·ªÅn truy c·∫≠p cho ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª t·ª´ `GenericDropdown`.
 * 3. Ng∆∞·ªùi d√πng nh·∫•n n√∫t "G·ª≠i y√™u c·∫ßu" (`ActionButtonWithFeedback`).
 * 4. M·ªôt `WarningDialog` ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë·ªÉ x√°c nh·∫≠n h√†nh ƒë·ªông chia s·∫ª.
 * 5. N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n:
 *    - H√†m `onAction` c·ªßa `ActionButtonWithFeedback` ƒë∆∞·ª£c g·ªçi.
 *    - Callback `onSuccess` v√† `onError` ƒë∆∞·ª£c l∆∞u tr·ªØ t·∫°m th·ªùi.
 *    - Tr·∫°ng th√°i `isButtonLoading` ƒë∆∞·ª£c ƒë·∫∑t th√†nh `true` ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i.
 *    - M·ªôt coroutine ƒë∆∞·ª£c kh·ªüi ch·∫°y ƒë·ªÉ m√¥ ph·ªèng y√™u c·∫ßu API (trong v√≠ d·ª• n√†y l√† `delay(1000)`).
 *    - D·ª±a tr√™n k·∫øt qu·∫£ m√¥ ph·ªèng, callback `onSuccessCallback` ho·∫∑c `onErrorCallback` t∆∞∆°ng ·ª©ng ƒë∆∞·ª£c g·ªçi
 *      ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£.
 * 6. N·∫øu ng∆∞·ªùi d√πng h·ªßy b·ªè, dialog s·∫Ω ƒë√≥ng v√† kh√¥ng c√≥ h√†nh ƒë·ªông n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.
 *
 * **Th√†nh ph·∫ßn ch√≠nh:**
 */
@Composable
fun ShareDeviceScreen(
//    navController: NavHostController,
    id: Int,
//    viewModel: DeviceSharingViewModel = hiltViewModel(),
) {
//    val addSharedUserState by viewModel.addSharedUserState.collectAsState()
//    when (addSharedUserState) {
//        DeviceSharingActionState.Idle -> {
//            viewModel.getSharedUsers(id)
//        }
//
//        DeviceSharingActionState.Loading -> {
//            CircularProgressIndicator()
//        }
//
//        is DeviceSharingActionState.Success -> {
//            LaunchedEffect(Unit) {
//                navController.popBackStack(
//                    Screens.SharedUsers.route + "?id=${id}",
//                    inclusive = false
//                )
//            }
//        }
//
//        is DeviceSharingActionState.Error -> {
//            Log.e(
//                "ShareDeviceScreen",
//                "Error: ${(addSharedUserState as DeviceSharingState.Error).error}"
//            )
//        }
//    }

    val coroutineScope = rememberCoroutineScope()

    var current by remember { mutableStateOf<String?>(null) }
    val deviceIdState = remember { mutableIntStateOf(id) }
//    val deviceIdErrorState = remember { mutableStateOf("") }

    val emailState = remember { mutableStateOf("") }
//    val emailErrorState = remember { mutableStateOf("") }

    /* state hi·ªÉn th·ªã dialog x√°c nh·∫≠n */
    var showConfirm by remember { mutableStateOf(false) }

    /* state gi·ªØ h√†m onSuccess / onError t·∫°m th·ªùi */
    var isButtonLoading by remember { mutableStateOf(false) }
    var pendingOnSuccess by remember { mutableStateOf<((String) -> Unit)?>(null) }
    var pendingOnError   by remember { mutableStateOf<((String) -> Unit)?>(null) }

    IoTHomeConnectAppTheme {
        val colorScheme = MaterialTheme.colorScheme

//        val isTablet = isTablet(LocalContext.current)
        Scaffold(
            modifier = Modifier
                .fillMaxSize()
                .background(colorScheme.background),
            containerColor = colorScheme.background
        ) { paddingValues ->
            Column (
                modifier = Modifier
                    .padding(paddingValues )
                    .fillMaxSize()
            ) {
                ColoredCornerBox(
                    cornerRadius = 40.dp
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp), // padding quanh Text
                        contentAlignment = Alignment.Center // üëâ Canh gi·ªØa b√™n trong box
                    ) {
                        Text(
                            "CHIA S·∫∫ THI·∫æT B·ªä",
                            style = TextStyle(
                                fontSize = 36.sp,
                                fontWeight = FontWeight.Bold,
                                letterSpacing = 1.sp
                            ),
                            color = MaterialTheme.colorScheme.onPrimary,
                            textAlign = TextAlign.Center,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }
                }


                InvertedCornerHeader(
                    backgroundColor = colorScheme.surface,
                    overlayColor = colorScheme.primary
                ){}

                Box(
                    modifier = Modifier
                        .fillMaxSize()                 // chi·∫øm tr·ªçn m√†n h√¨nh
                ) {
                    Column(
                        modifier = Modifier
                            .align(Alignment.Center)   // cƒÉn gi·ªØa trong Box
                            .padding(16.dp)            // padding 16dp b·ªën ph√≠a
                            .verticalScroll(rememberScrollState()),
                        verticalArrangement  = Arrangement.Center,
                        horizontalAlignment  = Alignment.CenterHorizontally
                    ) {
                        // √î nh·∫≠p ID thi·∫øt b·ªã
                        StyledTextField(
                            value = deviceIdState.intValue.toString(),
                            onValueChange = {
                            },
                            placeholderText = "ID Thi·∫øt b·ªã",
                            leadingIcon = Icons.Default.Devices
                        )

                        Spacer(modifier = Modifier.height(8.dp))

                        // √î nh·∫≠p T√™n thi·∫øt b·ªã
                        StyledTextField(
                            value = emailState.value,
                            onValueChange = {
                                emailState.value = it
                            },
                            placeholderText = "Email t√†i kho·∫£n",
                            leadingIcon = Icons.Default.Email
                        )

                        Spacer(modifier = Modifier.height(8.dp))

                        // Dropdown Spaces
                        // N·∫øu b·∫°n kh√¥ng mu·ªën d√πng ExposedDropdownMenuBox
                        // c√≥ th·ªÉ t√πy ch·ªânh DropdownMenuItem th·ªß c√¥ng, nh∆∞ng d∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• M3.

                        GenericDropdown(
                            items = listOf("ƒê√≥ng/m·ªü", "ƒêi·ªÅu khi·ªÉn ƒë·ªô s√°ng", "ƒëi·ªÅu khi·ªÉn m√†u"),
                            selectedItem = current,
                            onItemSelected = { current = it },
                            isTablet = false,
                            leadingIcon = Icons.Default.AssignmentTurnedIn // üëà truy·ªÅn icon v√†o
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        ActionButtonWithFeedback(
                            label  = "G·ª≠i y√™u c·∫ßu",
                            style  = HCButtonStyle.PRIMARY,
                            // 1) H√†nh ƒë·ªông th·∫≠t c·ªßa b·∫°n
                            onAction = { onSuccessCallback, onErrorCallback ->
                                /* 1. L∆∞u callback ‚Üí ch·ªù x√°c nh·∫≠n */
                                pendingOnSuccess = onSuccessCallback
                                pendingOnError   = onErrorCallback
                                showConfirm      = true
                            },
                            // 2) T√πy ch·ªânh ti√™u ƒë·ªÅ dialog
                            successDialogTitle = "Th√†nh c√¥ng",
                            errorDialogTitle   = "L·ªói",
                            isLoadingFromParent = isButtonLoading
                        )

                        /* 2. ConfirmationDialog ‚Äî h·ªèi ng∆∞·ªùi d√πng */
                        if (showConfirm) {
                            WarningDialog(
                                title    = "Chia s·∫Ω thi·∫øt b·ªã",
                                text  = "B·∫°n c√≥ ch·∫Øc mu·ªën chia s·∫Ω thi·∫øt b·ªã n√†y v·ªõi ng∆∞·ªùi d√πng n√†y kh√¥ng?",
                                confirmText = "ƒê·ªìng √Ω",
                                dismissText = "Hu·ª∑",
                                onConfirm = {
                                    showConfirm = false        // ƒë√≥ng dialog
                                    /* 3. Sau khi ƒë·ªìng √Ω ‚Üí th·ª±c thi h√†nh ƒë·ªông th·∫≠t */
                                    val onSuccessCallback = pendingOnSuccess    // copy local
                                    val onErrorCallback = pendingOnError
                                    pendingOnSuccess = null
                                    pendingOnError   = null
                                    coroutineScope.launch {
                                        isButtonLoading = true
                                        delay(1000)               // m√¥ ph·ªèng API
                                        val isActionSuccessful = true           // ‚Üê k·∫øt qu·∫£ th·∫≠t
                                        if (isActionSuccessful) onSuccessCallback?.invoke("Thi·∫øt b·ªã ƒë√£ th√™m th√†nh c√¥ng!")
                                        else      onErrorCallback?.invoke("Thao t√°c th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.")
                                        isButtonLoading = false
                                    }
                                },
                                onDismiss = {
                                    showConfirm = false          // hu·ª∑, kh√¥ng l√†m g√¨
                                    pendingOnSuccess = null
                                    pendingOnError   = null
                                    isButtonLoading = false
                                },
                            )
                        }
                    }
                }
            }
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun ShareDeviceScreenPreview() {
    ShareDeviceScreen(1)
}